Context Free Grammars for CODE

* = zero or more
+ = atleast once
? = optional
| = or

program -> funcDeclaration* "BEGIN" "CODE" varDeclaration* statement* "END" "CODE" EOF 
funcDeclaration -> "FN" function
function -> IDENTIFIER "(" parameters? ")"
parameters -> ( "STRING" "CHAR" | "INT" | "FLOAT" | "BOOL" ) IDENTIFIER ( "," ( "STRING" "CHAR" | "INT" | "FLOAT" | "BOOL" ) IDENTIFIER )*

varDeclaration -> ( "STRING" | "INT" | "CHAR" | "BOOL" | "FLOAT" ) IDENTIFIER ("=" expression)?
statement -> exprStmt | printStmt | block | ifStmt | whileStmt | scanStmt
ifStmt -> "IF" "(" expression ")" 
          "BEGIN" "IF" 
           statements* 
          "END" "IF"
          ("ELSE IF" "(" expression ")" 
          "BEGIN" "IF" 
           statements* 
          "END" "IF")*
          ("ELSE"
          "BEGIN" "IF" 
           statements* 
          "END" "IF"
          )?
whileStmt -> "WHILE" "(" expression ")" 
             "BEGIN" "WHILE" 
              statements* 
             "END" "WHILE"
block -> ( "IF" | "ELSE" | "WHILE" ) "(" expression ")" blockContent
blockContent -> "BEGIN" ( "IF" | "WHILE" ) statement* "END" ( "IF" | "WHILE" )
exprStmt -> expression
printStmt -> "print" expression
scanStmt -> IDENTIFIER ( "," IDENTIFIER)*

expression -> literal | unary | binary | grouping
literal -> STRING_LITERAL | FLOAT_LITERAL | CHAR_LITERAL | TRUE_LITERAL | FALSE_LITERAL
grouping -> '(' expression ')'
unary ->  ( '-' | "NOT" | '+' ) call


binary -> expression operator expression
operator -> '==' | '!=' | '<' | '>' | '<=' | '>=' | '+' | '-' | '*' | '/'

expression -> assignment
assignment -> IDENTIFIER "=" assignment | logic_or
logic_or -> logic_and ( "OR" logic_and )*
logic_and -> equality ( "AND" equality)*

primary -> STRING_LITERAL | FLOAT_LITERAL | CHAR_LITERAL | TRUE_LITERAL | FALSE_LITERAL | "null" | "(" expression ")" | IDENTIFIER
unary -> ( "!" | "-" ) | primary
factor -> unary ( ( "/" | "*" ) unary )*
equality -> comparison ( ( "!=" | "==" ) comparison )*
comparison -> term ( ( ">" | ">=" | "<" | "<=" ) term )*
term -> factor ( ( "-" | "+" ) factor )*